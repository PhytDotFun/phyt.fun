/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProfileRouteImport } from './routes/_profile'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'

const AuthenticatedIndexLazyRouteImport = createFileRoute('/_authenticated/')()
const MarketItemIdLazyRouteImport = createFileRoute('/market/$itemId')()
const ProfileProfileIdLazyRouteImport = createFileRoute(
  '/_profile/$profileId',
)()
const AuthenticatedMarketLazyRouteImport = createFileRoute(
  '/_authenticated/market',
)()
const AuthenticatedLeaderboardLazyRouteImport = createFileRoute(
  '/_authenticated/leaderboard',
)()
const AuthenticatedCompetitionsLazyRouteImport = createFileRoute(
  '/_authenticated/competitions',
)()
const AuthenticatedActivityLazyRouteImport = createFileRoute(
  '/_authenticated/activity',
)()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/_profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexLazyRoute = AuthenticatedIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/index.lazy').then((d) => d.Route),
)
const MarketItemIdLazyRoute = MarketItemIdLazyRouteImport.update({
  id: '/market/$itemId',
  path: '/market/$itemId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/market/$itemId.lazy').then((d) => d.Route),
)
const ProfileProfileIdLazyRoute = ProfileProfileIdLazyRouteImport.update({
  id: '/$profileId',
  path: '/$profileId',
  getParentRoute: () => ProfileRoute,
} as any).lazy(() =>
  import('./routes/_profile/$profileId.lazy').then((d) => d.Route),
)
const AuthenticatedMarketLazyRoute = AuthenticatedMarketLazyRouteImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/market.lazy').then((d) => d.Route),
)
const AuthenticatedLeaderboardLazyRoute =
  AuthenticatedLeaderboardLazyRouteImport.update({
    id: '/leaderboard',
    path: '/leaderboard',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/leaderboard.lazy').then((d) => d.Route),
  )
const AuthenticatedCompetitionsLazyRoute =
  AuthenticatedCompetitionsLazyRouteImport.update({
    id: '/competitions',
    path: '/competitions',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/competitions.lazy').then((d) => d.Route),
  )
const AuthenticatedActivityLazyRoute =
  AuthenticatedActivityLazyRouteImport.update({
    id: '/activity',
    path: '/activity',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/activity.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/activity': typeof AuthenticatedActivityLazyRoute
  '/competitions': typeof AuthenticatedCompetitionsLazyRoute
  '/leaderboard': typeof AuthenticatedLeaderboardLazyRoute
  '/market': typeof AuthenticatedMarketLazyRoute
  '/$profileId': typeof ProfileProfileIdLazyRoute
  '/market/$itemId': typeof MarketItemIdLazyRoute
  '/': typeof AuthenticatedIndexLazyRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/activity': typeof AuthenticatedActivityLazyRoute
  '/competitions': typeof AuthenticatedCompetitionsLazyRoute
  '/leaderboard': typeof AuthenticatedLeaderboardLazyRoute
  '/market': typeof AuthenticatedMarketLazyRoute
  '/$profileId': typeof ProfileProfileIdLazyRoute
  '/market/$itemId': typeof MarketItemIdLazyRoute
  '/': typeof AuthenticatedIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_profile': typeof ProfileRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/activity': typeof AuthenticatedActivityLazyRoute
  '/_authenticated/competitions': typeof AuthenticatedCompetitionsLazyRoute
  '/_authenticated/leaderboard': typeof AuthenticatedLeaderboardLazyRoute
  '/_authenticated/market': typeof AuthenticatedMarketLazyRoute
  '/_profile/$profileId': typeof ProfileProfileIdLazyRoute
  '/market/$itemId': typeof MarketItemIdLazyRoute
  '/_authenticated/': typeof AuthenticatedIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/activity'
    | '/competitions'
    | '/leaderboard'
    | '/market'
    | '/$profileId'
    | '/market/$itemId'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/activity'
    | '/competitions'
    | '/leaderboard'
    | '/market'
    | '/$profileId'
    | '/market/$itemId'
    | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_profile'
    | '/login'
    | '/_authenticated/activity'
    | '/_authenticated/competitions'
    | '/_authenticated/leaderboard'
    | '/_authenticated/market'
    | '/_profile/$profileId'
    | '/market/$itemId'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  ProfileRoute: typeof ProfileRouteWithChildren
  LoginRoute: typeof LoginRoute
  MarketItemIdLazyRoute: typeof MarketItemIdLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_profile': {
      id: '/_profile'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/market/$itemId': {
      id: '/market/$itemId'
      path: '/market/$itemId'
      fullPath: '/market/$itemId'
      preLoaderRoute: typeof MarketItemIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_profile/$profileId': {
      id: '/_profile/$profileId'
      path: '/$profileId'
      fullPath: '/$profileId'
      preLoaderRoute: typeof ProfileProfileIdLazyRouteImport
      parentRoute: typeof ProfileRoute
    }
    '/_authenticated/market': {
      id: '/_authenticated/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof AuthenticatedMarketLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/leaderboard': {
      id: '/_authenticated/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof AuthenticatedLeaderboardLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/competitions': {
      id: '/_authenticated/competitions'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof AuthenticatedCompetitionsLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/activity': {
      id: '/_authenticated/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof AuthenticatedActivityLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedActivityLazyRoute: typeof AuthenticatedActivityLazyRoute
  AuthenticatedCompetitionsLazyRoute: typeof AuthenticatedCompetitionsLazyRoute
  AuthenticatedLeaderboardLazyRoute: typeof AuthenticatedLeaderboardLazyRoute
  AuthenticatedMarketLazyRoute: typeof AuthenticatedMarketLazyRoute
  AuthenticatedIndexLazyRoute: typeof AuthenticatedIndexLazyRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedActivityLazyRoute: AuthenticatedActivityLazyRoute,
  AuthenticatedCompetitionsLazyRoute: AuthenticatedCompetitionsLazyRoute,
  AuthenticatedLeaderboardLazyRoute: AuthenticatedLeaderboardLazyRoute,
  AuthenticatedMarketLazyRoute: AuthenticatedMarketLazyRoute,
  AuthenticatedIndexLazyRoute: AuthenticatedIndexLazyRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface ProfileRouteChildren {
  ProfileProfileIdLazyRoute: typeof ProfileProfileIdLazyRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileProfileIdLazyRoute: ProfileProfileIdLazyRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  ProfileRoute: ProfileRouteWithChildren,
  LoginRoute: LoginRoute,
  MarketItemIdLazyRoute: MarketItemIdLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
