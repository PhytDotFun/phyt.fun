# Staging environment for staging.phyt.fun deployment
# This file is used by Dokploy or CI/CD for remote staging deployment

services:
    nginx-lb:
        image: nginx:alpine
        container_name: nginx-staging-lb
        volumes:
            - ./tooling/nginx/staging.nginx.conf:/etc/nginx/nginx.conf:ro
            - /etc/letsencrypt/live/staging.phyt.fun:/etc/ssl/certs:ro
            - /etc/letsencrypt/live/staging.phyt.fun:/etc/ssl/private:ro
        depends_on:
            - hono-api-1
            - hono-api-2
        ports:
            - '80:80'
            - '443:443'
        restart: always
        deploy:
            resources:
                limits:
                    memory: 128M
                    cpus: '0.25'

    hono-api-1:
        image: phyt/hono-api
        build:
            context: .
            dockerfile: Dockerfile
            args:
                PROJECT: 'hono-api'
                NODE_ENV: 'production'
        container_name: hono-api-staging-1
        depends_on:
            vault-agent:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - vault-secrets:/vault/secrets:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=production
            - WAIT_FOR_SECRET_FILE=/vault/secrets/hono-api.env
        command: ['node', 'dist/index.js']
        restart: always
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: '0.5'

    hono-api-2:
        image: phyt/hono-api
        build:
            context: .
            dockerfile: Dockerfile
            args:
                PROJECT: 'hono-api'
                NODE_ENV: 'production'
        container_name: hono-api-staging-2
        depends_on:
            vault-agent:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - vault-secrets:/vault/secrets:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=production
            - WAIT_FOR_SECRET_FILE=/vault/secrets/hono-api.env
        command: ['node', 'dist/index.js']
        restart: always
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: '0.5'

    workers:
        image: phyt/workers
        build:
            context: .
            dockerfile: Dockerfile
            args:
                PROJECT: 'workers'
                NODE_ENV: 'production'
        container_name: workers-staging
        depends_on:
            vault-agent:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - vault-secrets:/vault/secrets:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=production
            - WAIT_FOR_SECRET_FILE=/vault/secrets/workers.env
        command: ['node', 'dist/index.js']
        restart: always
        deploy:
            resources:
                limits:
                    memory: 512M
                    cpus: '0.5'

    postgres:
        image: postgres:17
        container_name: postgres-staging
        depends_on:
            - vault-agent
        volumes:
            - postgres-staging-data:/var/lib/postgresql/data
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/wait-for-secrets.sh:ro
            - vault-secrets:/vault/secrets:ro
        entrypoint:
            [
                '/usr/local/bin/wait-for-secrets.sh',
                'docker-entrypoint.sh',
                'postgres'
            ]
        environment:
            - WAIT_FOR_SECRET_FILE=/vault/secrets/postgres.env
            - POSTGRES_INITDB_ARGS=--auth=scram-sha-256 --auth-host=scram-sha-256 --auth-local=scram-sha-256
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -q -h 127.0.0.1 -p 5432']
            interval: 3s
            timeout: 3s
            start_period: 30s
            retries: 20
        restart: always
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: '0.75'

    redis:
        image: redis:7-alpine
        container_name: redis-staging
        command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
        restart: always
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: '0.25'

    vault-agent:
        image: hashicorp/vault:latest
        container_name: vault-agent-staging
        cap_add:
            - IPC_LOCK
        user: root
        security_opt:
            - no-new-privileges:true
        volumes:
            - ./tooling/vault:/vault/config:ro
            - ${CREDENTIALS_DIR:-./tooling/vault/credentials}:/vault/credentials:ro
            - ./tooling/vault/templates:/vault/templates:ro
            - vault-secrets:/vault/secrets
        environment:
            - VAULT_ENV=staging
        entrypoint:
            ['/bin/sh', '-lc', '/vault/config/scripts/agent-entrypoint.sh']
        restart: always

volumes:
    vault-secrets:
    postgres-staging-data:
