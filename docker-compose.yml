services:
    vault-agent:
        image: hashicorp/vault:latest
        container_name: vault-agent-${COMPOSE_PROJECT_NAME:-phyt}
        cap_add:
            - IPC_LOCK
        user: root
        security_opt: ['no-new-privileges:true']
        volumes:
            - ./tooling/vault:/vault/config:ro
            - ./tooling/vault/templates:/vault/templates:ro
            # Ephemeral credentials mounted read-only
            - /etc/vault/role_id:/vault/credentials/role_id:ro
            - /etc/vault/secret_id:/vault/credentials/secret_id:ro
        tmpfs:
            # All secrets written to RAM only
            - /vault/secrets:rw,noexec,nosuid,nodev,mode=0750,size=10M
            - /vault/credentials:rw,noexec,nosuid,nodev,mode=0600,size=1M
        environment:
            - VAULT_ENV=${VAULT_ENV:-staging}
            - VAULT_ADDR=https://vault.tailea8363.ts.net
            - VAULT_NAMESPACE=${VAULT_NAMESPACE:-}
            - DEPLOYMENT_ID=${DEPLOYMENT_ID:-}
            # No tokens or credentials in environment
        entrypoint:
            ['/bin/sh', '-lc', '/vault/config/scripts/agent-entrypoint.sh']
        restart: ${RESTART_POLICY:-unless-stopped}
        networks:
            - phyt-network
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'curl -sf http://127.0.0.1:8007/v1/sys/health >/dev/null'
                ]
            interval: 30s
            timeout: 5s
            retries: 3

    postgres:
        image: postgres:17
        container_name: postgres-${COMPOSE_PROJECT_NAME:-phyt}
        depends_on:
            vault-agent:
                condition: service_started
        tmpfs:
            - /vault/secrets:ro,noexec,nosuid,nodev,mode=0750,size=10M
        volumes:
            - postgres-data:/var/lib/postgresql/data
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/wait-for-secrets.sh:ro
        entrypoint:
            [
                '/usr/local/bin/wait-for-secrets.sh',
                'docker-entrypoint.sh',
                'postgres'
            ]
        environment:
            - WAIT_FOR_SECRET_FILE=/vault/secrets/postgres.env
            - POSTGRES_INITDB_ARGS=--auth=scram-sha-256 --auth-host=scram-sha-256 --auth-local=scram-sha-256
            - PGDATA=/var/lib/postgresql/data/pgdata
        healthcheck:
            test:
                ['CMD-SHELL', 'pg_isready -q -h 127.0.0.1 -p 5432 -U postgres']
            interval: 3s
            timeout: 3s
            start_period: 30s
            retries: 20
        restart: ${RESTART_POLICY:-unless-stopped}
        networks:
            - phyt-network
        profiles: ['dev', 'staging', 'prod']

    pgbouncer:
        image: edoburu/pgbouncer:latest
        container_name: pgbouncer-${COMPOSE_PROJECT_NAME:-phyt}
        depends_on:
            postgres:
                condition: service_healthy
            vault-agent:
                condition: service_started
        tmpfs:
            - /vault/secrets:ro,noexec,nosuid,nodev,mode=0750,size=10M
        volumes:
            - ./tooling/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/wait-for-secrets.sh:ro
        entrypoint:
            [
                '/usr/local/bin/wait-for-secrets.sh',
                '/usr/bin/pgbouncer',
                '/etc/pgbouncer/pgbouncer.ini'
            ]
        environment:
            - WAIT_FOR_SECRET_FILE=/vault/secrets/pgbouncer.env
        networks:
            - phyt-network
        profiles: ['staging', 'prod']
        restart: ${RESTART_POLICY:-unless-stopped}

    redis:
        image: redis:7-alpine
        container_name: redis-${COMPOSE_PROJECT_NAME:-phyt}
        command: redis-server --maxmemory ${REDIS_MEMORY:-128mb} --maxmemory-policy allkeys-lru --save ""
        restart: ${RESTART_POLICY:-unless-stopped}
        networks:
            - phyt-network
        profiles: ['dev', 'staging', 'prod']
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 5s
            timeout: 3s
            retries: 5

    hono-api:
        image: ${IMAGE_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY}/hono-api:${IMAGE_TAG:-latest}
        # No container_name -> scale to >= 2 instances
        # docker compose up -d --scale hono-api=2 nginx
        depends_on:
            vault-agent:
                condition: service_started
            pgbouncer:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        tmpfs:
            - /vault/secrets:ro,noexec,nosuid,nodev,mode=0750,size=10M
        volumes:
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=${NODE_ENV:-staging}
            - WAIT_FOR_SECRET_FILE=/vault/secrets/hono-api.env
            - DATABASE_HOST=${DATABASE_HOST:-pgbouncer}
        command: ['node', 'dist/index.js']
        restart: ${RESTART_POLICY:-always}
        networks:
            - phyt-network
        profiles: ['staging', 'prod']

    workers:
        image: ${IMAGE_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY}/workers:${IMAGE_TAG:-latest}
        container_name: workers-${COMPOSE_PROJECT_NAME:-phyt}
        depends_on:
            vault-agent:
                condition: service_started
            pgbouncer:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        tmpfs:
            - /vault/secrets:ro,noexec,nosuid,nodev,mode=0750,size=10M
        volumes:
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=${NODE_ENV:-staging}
            - WAIT_FOR_SECRET_FILE=/vault/secrets/workers.env
            - DATABASE_HOST=${DATABASE_HOST:-pgbouncer}
        command: ['node', 'dist/index.js']
        restart: ${RESTART_POLICY:-unless-stopped}
        networks:
            - phyt-network
        profiles: ['dev', 'staging', 'prod']

    nginx:
        image: nginx:alpine
        container_name: nginx-${COMPOSE_PROJECT_NAME:-phyt}
        volumes:
            - ./tooling/nginx/${NGINX_CONFIG:-default}.nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - hono-api
        ports:
            - '${NGINX_PORT:-8080}:8080'
        restart: always
        networks:
            - phyt-network
        profiles: ['staging', 'prod']

volumes:
    postgres-data:

networks:
    phyt-network:
        driver: bridge
