services:
    vault-agent:
        image: hashicorp/vault:latest
        container_name: vault-agent-${COMPOSE_PROJECT_NAME:-phyt}
        cap_add:
            - IPC_LOCK
        user: root
        security_opt:
            - no-new-privileges:true
        volumes:
            - ./tooling/vault:/vault/config:ro
            - ${CREDENTIALS_DIR:-./tooling/vault/credentials}:/vault/credentials:ro
            - ./tooling/vault/templates:/vault/templates:ro
            - vault-secrets:/vault/secrets
        environment:
            - VAULT_ENV=${VAULT_ENV:-dev}
        entrypoint:
            ['/bin/sh', '-lc', '/vault/config/scripts/agent-entrypoint.sh']
        restart: ${RESTART_POLICY:-unless-stopped}

    # Staging & Production: Load-balanced API instances
    hono-api-1:
        image: ${IMAGE_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY}/hono-api:${IMAGE_TAG:-latest}
        container_name: hono-api-${COMPOSE_PROJECT_NAME:-staging}-1
        depends_on:
            vault-agent:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - vault-secrets:/vault/secrets:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=production
            - WAIT_FOR_SECRET_FILE=/vault/secrets/hono-api.env
        command: ['node', 'dist/index.js']
        restart: ${RESTART_POLICY:-always}
        profiles: ['staging', 'prod']
        deploy:
            resources:
                limits:
                    memory: ${API_MEMORY_LIMIT:-512M}
                    cpus: ${API_CPU_LIMIT:-0.5}
                reservations:
                    memory: ${API_MEMORY_RESERVATION:-256M}
                    cpus: ${API_CPU_RESERVATION:-0.25}

    hono-api-2:
        image: ${IMAGE_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY}/hono-api:${IMAGE_TAG:-latest}
        container_name: hono-api-${COMPOSE_PROJECT_NAME:-staging}-2
        depends_on:
            vault-agent:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - vault-secrets:/vault/secrets:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=production
            - WAIT_FOR_SECRET_FILE=/vault/secrets/hono-api.env
        command: ['node', 'dist/index.js']
        restart: ${RESTART_POLICY:-always}
        profiles: ['staging', 'prod']
        deploy:
            resources:
                limits:
                    memory: ${API_MEMORY_LIMIT:-512M}
                    cpus: ${API_CPU_LIMIT:-0.5}
                reservations:
                    memory: ${API_MEMORY_RESERVATION:-256M}
                    cpus: ${API_CPU_RESERVATION:-0.25}

    workers:
        image: ${IMAGE_REGISTRY:-phyt}/workers:${IMAGE_TAG:-latest}
        build:
            context: .
            dockerfile: Dockerfile
            args:
                PROJECT: 'workers'
                NODE_ENV: ${NODE_ENV:-development}
        container_name: workers-${COMPOSE_PROJECT_NAME:-phyt}
        depends_on:
            vault-agent:
                condition: service_started
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - vault-secrets:/vault/secrets:ro
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
        entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
        environment:
            - NODE_ENV=${NODE_ENV:-development}
            - WAIT_FOR_SECRET_FILE=/vault/secrets/workers.env
        command: ['node', 'dist/index.js']
        restart: ${RESTART_POLICY:-unless-stopped}
        profiles: ['dev', 'staging', 'prod']
        deploy:
            resources:
                limits:
                    memory: ${WORKERS_MEMORY_LIMIT:-256M}
                    cpus: ${WORKERS_CPU_LIMIT:-0.25}
                reservations:
                    memory: ${WORKERS_MEMORY_RESERVATION:-128M}
                    cpus: ${WORKERS_CPU_RESERVATION:-0.125}

    postgres:
        image: postgres:17
        container_name: postgres-${COMPOSE_PROJECT_NAME:-phyt}
        depends_on:
            - vault-agent
        volumes:
            - postgres-data:/var/lib/postgresql/data
            - ./tooling/ops/docker-entrypoint.sh:/usr/local/bin/wait-for-secrets.sh:ro
            - vault-secrets:/vault/secrets:ro
        entrypoint:
            [
                '/usr/local/bin/wait-for-secrets.sh',
                'docker-entrypoint.sh',
                'postgres'
            ]
        environment:
            - WAIT_FOR_SECRET_FILE=/vault/secrets/postgres.env
            - POSTGRES_INITDB_ARGS=--auth=scram-sha-256 --auth-host=scram-sha-256 --auth-local=scram-sha-256
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -q -h 127.0.0.1 -p 5432']
            interval: 3s
            timeout: 3s
            start_period: 30s
            retries: 20
        restart: ${RESTART_POLICY:-unless-stopped}
        ports:
            - '${POSTGRES_PORT:-5432}:5432'
        profiles: ['dev', 'staging', 'prod']
        deploy:
            resources:
                limits:
                    memory: ${POSTGRES_MEMORY_LIMIT:-512M}
                    cpus: ${POSTGRES_CPU_LIMIT:-0.5}
                reservations:
                    memory: ${POSTGRES_MEMORY_RESERVATION:-256M}
                    cpus: ${POSTGRES_CPU_RESERVATION:-0.25}

    redis:
        image: redis:7-alpine
        container_name: redis-${COMPOSE_PROJECT_NAME:-phyt}
        command: redis-server --maxmemory ${REDIS_MEMORY:-128mb} --maxmemory-policy allkeys-lru
        restart: ${RESTART_POLICY:-unless-stopped}
        ports:
            - '${REDIS_PORT:-6379}:6379'
        profiles: ['dev', 'staging', 'prod']
        deploy:
            resources:
                limits:
                    memory: ${REDIS_MEMORY_LIMIT:-128M}
                    cpus: ${REDIS_CPU_LIMIT:-0.125}
                reservations:
                    memory: ${REDIS_MEMORY_RESERVATION:-64M}
                    cpus: ${REDIS_CPU_RESERVATION:-0.0625}

    # Staging: Nginx load balancer
    nginx-staging:
        image: nginx:alpine
        container_name: nginx-staging-lb
        volumes:
            - ./tooling/nginx/staging.nginx.conf:/etc/nginx/nginx.conf:ro
            - ${SSL_CERT_PATH:-/etc/letsencrypt/live/staging.phyt.fun}:/etc/ssl/certs:ro
            - ${SSL_KEY_PATH:-/etc/letsencrypt/live/staging.phyt.fun}:/etc/ssl/private:ro
        depends_on:
            - hono-api-1
            - hono-api-2
        ports:
            - '80:80'
            - '443:443'
        restart: always
        profiles: ['staging']
        deploy:
            resources:
                limits:
                    memory: 128M
                    cpus: '0.25'

    # Production: Nginx load balancer
    nginx-prod:
        image: nginx:alpine
        container_name: nginx-prod-lb
        volumes:
            - ./tooling/nginx/prod.nginx.conf:/etc/nginx/nginx.conf:ro
            - ${SSL_CERT_PATH:-/etc/letsencrypt/live/phyt.fun}:/etc/ssl/certs:ro
            - ${SSL_KEY_PATH:-/etc/letsencrypt/live/phyt.fun}:/etc/ssl/private:ro
            - ./apps/web/dist:/usr/share/nginx/html:ro
        depends_on:
            - hono-api-1
            - hono-api-2
        ports:
            - '80:80'
            - '443:443'
        restart: always
        profiles: ['prod']
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: '0.5'
                reservations:
                    memory: 128M
                    cpus: '0.25'

volumes:
    vault-secrets:
    postgres-data:
