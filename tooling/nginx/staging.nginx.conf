events {
    worker_connections 1024;
    use epoll;
}

http {
    include mime.types;
    default_type application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting for staging (more permissive than prod)
    limit_req_zone $binary_remote_addr zone=staging_api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=staging_login:10m rate=10r/m;
    
    # Upstream load balancer configuration
    upstream hono_backend {
        least_conn;  # Use least connections load balancing
        server hono-api-1:8000 max_fails=3 fail_timeout=30s;
        server hono-api-2:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Health check upstream
    upstream health_check {
        server hono-api-1:8000;
        server hono-api-2:8000 backup;
    }

    # IP allowlist for staging access (Tailscale subnet + office IPs)
    geo $allowed_ip {
        default 0;
        # Tailscale subnet - standard range
        100.64.0.0/10 1;
        # Additional common Tailscale ranges
        100.100.0.0/16 1;
        # Private networks (for development)
        10.0.0.0/8 1;
        172.16.0.0/12 1;
        192.168.0.0/16 1;
        # Localhost (for health checks)
        127.0.0.1/32 1;
        # Add your office/team IP addresses here
        # 203.0.113.0/24 1;  # Example office network
        # 198.51.100.50/32 1;  # Example individual IP
    }

    # HTTP redirect to HTTPS
    server {
        listen 80;
        server_name staging.phyt.fun;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server with access controls
    server {
        listen 443 ssl http2;
        server_name staging.phyt.fun;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/privkey.pem;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers for staging
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Robots-Tag "noindex, nofollow" always;  # Prevent staging indexing
        
        # HSTS (shorter for staging)
        add_header Strict-Transport-Security "max-age=86400; includeSubDomains" always;
        
        # Access control check
        if ($allowed_ip = 0) {
            return 403 "Access restricted to authorized networks";
        }
        
        # Root directory for static files
        root /usr/share/nginx/html;
        index index.html;
        
        # Health check endpoint (bypass access control)
        location /nginx-health {
            access_log off;
            return 200 "staging nginx healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Backend health check
        location /api/health {
            access_log off;
            proxy_pass http://health_check/api/health;
            proxy_set_header Host $host;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }
        
        # API endpoints with load balancing
        location /api/ {
            limit_req zone=staging_api burst=50 nodelay;
            
            proxy_pass http://hono_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Load balancer timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Retry logic
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }
        
        # Auth endpoints with stricter rate limiting
        location ~ ^/api/(auth|login|register) {
            limit_req zone=staging_login burst=5 nodelay;
            
            proxy_pass http://hono_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # Static assets with caching
        location ~* \.(?:js|mjs|css|png|jpg|jpeg|gif|svg|ico|woff2?|ttf|eot)$ {
            try_files $uri =404;
            add_header Cache-Control "public, max-age=86400"; # 1 day cache for staging
            add_header X-Content-Type-Options nosniff always;
            
            # Staging watermark header
            add_header X-Environment "staging" always;
        }
        
        # HTML files with no caching
        location ~* \.html$ {
            try_files $uri =404;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header X-Environment "staging" always;
        }
        
        # SPA fallback (must be last)
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header X-Environment "staging" always;
            
            # Security headers for SPA
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
        }
    }
    
    # Server status page (accessible only from localhost for monitoring)
    server {
        listen 127.0.0.1:8081;
        
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        location /upstream_status {
            return 200 "Upstream status:\nhono-api-1:8000\nhono-api-2:8000\n";
            add_header Content-Type text/plain;
        }
    }
}